D:&cd D:\USER\Downloads\ATLAS\Projects\Mastering-Security-Token-ERC-3643\Web3Auth-Mastering\w3a-google-demo&npm run start

npm install
npm run start

d:&cd D:\USER\Downloads\ATLAS\Projects\Mastering-Security-Token-ERC-3643\scaffold-eth-2

yarn hardhat clean
yarn compile --force
yarn deploy --reset --network polygonAmoy

-------------------DONE-------------------

I. Connect web3auth DONE

Client ID Web3Auth Firebase: BF1YoXGl61BMnkGgRhNbAdBEbUWqyUI0Se-tn8T9DL75b9M8iw0TngdWbdBFjkOoYA9YVeQ9Jgy2SM2DHJnbSl4

Client ID Web3Auth Google: BH855-UE0U6H-Cvq1O2ukHMU09JPtllkDAZkFUhiSQEg86iVoD1yaCxpMUa1TzYpWLuXuBsp_VvFnFUUUhJoV1Q

Verifier name: web3auth-google-verifier001

Google Client ID: 947022819304-okcm8e1nq14m0vm8i8bmocpim6th1hep.apps.googleusercontent.com


II. Test interacting with smart contracts already deployed. DONE

III. Deploy smart contracts on testnet and verify them DONE


1. Add api keys required to deploy to Amoney testnet.

polygonscan NV3PM7WWB44UQ95Y29QPRDU3K5Q8RBEYAK
alchemy bW_eK_aRxQsGnt2dPJiYq4K8-UyKTpor
alchemy-amoy https://polygon-amoy.g.alchemy.com/v2/bW_eK_aRxQsGnt2dPJiYq4K8-UyKTpor


2. Make The web3auth wallet the one with tokenIssuer, tokenAgent and tokenAdmin permissions.

Wallets for 
Alice
Bob
and Charlie wallets will be metamask wallets for me.


I cant just use the hardhat wallets because they are of public knowledge any asset sent there will dissapear.

We have 3 options.

A. Generate them using web3auth
B. Generate them using yarn generate | yarn account
C. Generate them using metamask wallet. THE CHOSEN ONE.


3. Deployer wallet is the one I will send funds to deploy the smart contract

4. I will use another gmail account for web3auth to do the whole enrollment process and test normal user functionalities.

yarn deploy --reset --network polygonAmoy

Verify with no parameters in constructor
yarn hardhat-verify --network polygonAmoy CONTRACT_ADDRESS

Verify with parameters in constructor
yarn hardhat-verify --network polygonAmoy CONTRACT_ADDRESS --constructor-args arguments.js

Note: To verify a library smart contract, first you flatten it and then use etherscan to upload the full .sol file.

Mission: All smart contracts deployed and verified and web3auth wallets interacting with them.

-------------------ToDo-------------------


IV. Create interactions with the deployed smart contract using web3auth interface.

1. Interact with the already deployed contract. DONE

2. Create admin buttons to interact with token
-BalanceOf DONE
-Allowance DONE
-Compliance DONE
-Decimals DONE
-GetFrozenTokens DONE
-IsFrozen DONE
-Name DONE
-OnchainID DONE
-Paused DONE
-Symbol DONE
-TotalSupply DONE

-Approve  DONE
-batchMint DONE
-batchBurn DONE
-batchTransfer DONE
-burn DONE
-freeze partial tokens DONE
-mint DONE
-pause  DONE
-recoveryAddress
-transfer DONE
-unfreeze partial tokens DONE
-unpause DONE


Token Contract Address:  0x60E5799fed9ACbdaF36e752a05468f1519b03c6f

Deployer:  0xb44e0C06718534F27847e607B6AE9368798fB974
Token Admin:  0x7a82c50eDDc576d5Cd26b530424D7d465D311bB9

Adam Wallet:  0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1
Bob Wallet:  0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4
Charlie Wallet:  0x34795B6a05543Fe097C8BbBc221e3119f27B793E

Free Wallet: 0xc6442dbED945a1cf0B747994510a3bCCB8ECb693
Charlie identity: 0xd30e99C61B55C360ece31e952B26793a723c0173

0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1,0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4,0x34795B6a05543Fe097C8BbBc221e3119f27B793E
10000000,10000000,10000000

CONTINUE HERE: 

Find out why is the recovery function failing from the web3auth interface.

Before that, do it from the etherscan interface. Pay a lot of gas.

Then test it from scaffold eth. To read the code,


3. Create user buttons to interact with tokens

4. make it more visually appealing


V. Launch online using vercel/simmilar





